from FlightRadar24 import FlightRadar24API
from datetime import datetime, timezone
import asyncio
from typing import Optional, Dict

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
fr_api = FlightRadar24API()

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö
airport_cache: Dict[str, dict] = {}


async def get_airport_details(code: str, is_iata: bool = True) -> Optional[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not code:
        return None

    cache_key = f"{code}_{'iata' if is_iata else 'icao'}"

    if cache_key not in airport_cache:
        try:
            details = fr_api.get_airport(code=code, details=True)
            airport_cache[cache_key] = {
                'name': getattr(details, 'name', f'Airport {code}'),
                'icao': getattr(details, 'icao', None),
                'iata': getattr(details, 'iata', None),
                'latitude': getattr(details, 'latitude', None),
                'longitude': getattr(details, 'longitude', None),
                'country': getattr(details, 'country', None)
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ {code}: {e}")
            airport_cache[cache_key] = None

    return airport_cache.get(cache_key)


async def process_flights():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–π—Å–æ–≤"""
    bounds = fr_api.get_bounds_by_point(43.0, 34.0, 300000)
    flights = fr_api.get_flights(bounds=bounds)

    enriched_flights = []

    for flight in flights:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            origin_iata = getattr(flight, 'origin_airport_iata', None)
            dest_iata = getattr(flight, 'destination_airport_iata', None)

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            origin_details = await get_airport_details(origin_iata) if origin_iata else None
            dest_details = await get_airport_details(dest_iata) if dest_iata else None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
            route_str = ""
            if origin_iata and origin_details:
                route_str += f"{origin_details['icao'] or '?'} ({origin_details['name']})"
            else:
                route_str += "?"

            route_str += " ‚Üí "

            if dest_iata and dest_details:
                route_str += f"{dest_details['icao'] or '?'} ({dest_details['name']})"
            else:
                route_str += "?"

            enriched_flight = {
                'callsign': flight.callsign,
                'aircraft': flight.aircraft_code,
                'airline': getattr(flight, 'airline', 'Unknown'),
                'altitude': flight.altitude,
                'speed': flight.ground_speed,
                'route': route_str,
                'route_icao': f"{origin_details['icao'] if origin_details else '?'} ‚Üí {dest_details['icao'] if dest_details else '?'}"
            }
            enriched_flights.append(enriched_flight)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–π—Å–∞ {getattr(flight, 'callsign', 'UNKNOWN')}: {e}")

    return enriched_flights


def print_flights_list(flights: list):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print("\n‚úà –°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤:")
    for i, flight in enumerate(flights, 1):
        print(
            f"{i}. {flight['callsign']} | "
            f"{flight['aircraft']} | "
            f"{flight['airline']} | "
            f"–í—ã—Å–æ—Ç–∞: {flight['altitude']} ft | "
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {flight['speed']} —É–∑–ª–æ–≤ | "
            f"–ú–∞—Ä—à—Ä—É—Ç: {flight['route']}"
        )


async def main():
    current_time = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')
    print(f"\nüõ´ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö –Ω–∞–¥ –ß—ë—Ä–Ω—ã–º –º–æ—Ä–µ–º ({current_time})")

    flights = await process_flights()
    print_flights_list(flights)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ä–µ–π—Å–æ–≤


if __name__ == "__main__":
    asyncio.run(main())