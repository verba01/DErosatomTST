import asyncio
from app.services.flightradar_services import FlightDataService


async def main():
    service = FlightDataService()

    print("\nüõ´ –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–π—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    print("‚è≥ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        result = await service.save_flight_data()
        if result:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            if hasattr(result, 'map_path'):
                print(f"‚úî –ö–∞—Ä—Ç–∞: {result.map_path}")
            elif isinstance(result, dict) and 'map' in result:
                print(f"‚úî –ö–∞—Ä—Ç–∞: {result['map']}")

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞
        task = asyncio.create_task(service.run_periodically())

        while True:
            command = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (hour/day/map/exit): ").strip().lower()

            if command == "hour":
                flights = await service.get_last_hour_flights()
                print(f"\n–†–µ–π—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å ({len(flights)}):")
                for i, flight in enumerate(flights[:20], 1):
                    print(
                        f"{i}. {flight.callsign} | "
                        f"{flight.aircraft_code if hasattr(flight, 'aircraft_code') else 'N/A'} | "
                        f"{flight.origin_airport or '?'}‚Üí{flight.destination_airport or '?'}"
                    )

            elif command == "day":
                stats = await service.get_last_day_stats()
                print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:")
                for i, (model, count) in enumerate(stats[:10], 1):
                    print(f"{i}. {model}: {count} —Ä–µ–π—Å–æ–≤")

            elif command == "map":
                print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã...")
                result = await service.save_flight_data()
                if result and hasattr(result, 'map_path'):
                    print(f"‚úî –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result.map_path}")
                elif result and isinstance(result, dict):
                    print(f"‚úî –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result.get('map', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É")

            elif command == "exit":
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                print("\nüõë –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break

            else:
                print("\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: hour, day, map, exit")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if 'task' in locals():
            task.cancel()
            await task


if __name__ == "__main__":
    asyncio.run(main())